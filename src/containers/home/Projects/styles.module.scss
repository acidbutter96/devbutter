.container {
    padding: 0 4rem;

    position: relative;

    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;

    min-height: 100vh;

    background-color: var(--blue-100);
}

.row {
    display: flex;
    flex-direction: row;

    width: 100%;
}

.firstRow {
    display: flex;

    padding: 4rem 0 1rem 4rem;

    width: 100%;

    h2 {
        font-size: 3rem;
        font-family: "Roboto", sans-serif;
        color: var(--white);

        position: relative;

        z-index: 2;

        &::after {
            content: "";
            position: absolute;
            right: 0;
            top: 100%;

            height: 0.5rem;
            width: 30rem;
            z-index: 1;

            background-color: var(--green-500);
        }
    }

    .titleContainer {
        position: absolute;
        left: 4rem;
        top: 16rem;

        font-size: 4rem;

        width: 50rem;

        .title {
            color: var(--green-500);

            font-size: 3rem;
        }

        .text {
            color: var(--white);
        }

        transition: all 2s !important;

        cursor: default;

        z-index: 2;

        &:hover {
            top: 20rem;

            .title {
                color: var(--white);
            }

            .text {
                color: var(--green-500);
            }
        }
    }
}

$grid_width: 80%;
$project_width: 33.3%;
$skillImageWidth: 3rem;
$projectFontSize: 1.3125rem;

// Define a mixin to generate grid styles
@mixin grid($columns, $rows) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    grid-template-rows: repeat($rows, 1fr);
}

// Define a mixin to generate grid item styles
@mixin grid-item {
    border: 1px solid #000; // Example border style
}

// Define a function to generate a class name based on the number of items
@function generate-grid-class($items) {
    @return "grid-" + $items;
}

// Create a loop to generate grid classes for different numbers of items
@for $i from 1 through 9 {
    .#{generate-grid-class($i)} {
        @include grid(3, ceil($i / 3)); // Adjust for rows based on the number of items
        > div {
            @include grid-item;
        }
    }
}

.secondRow {
    display: flex;

    width: 100%;
    min-height: 100%;

    .grid {
        width: $grid_width;

        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(2, 1fr);
        grid-column-gap: 1rem;
        grid-row-gap: 1rem;

        .projectContainer {

            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;

            // position: absolute;
            // top: 2rem;

            padding: 4rem;

            .upperRow {
                display: flex;
                width: 100%;
            }

            .underRow {
                display: flex;
                justify-content: space-between;
                align-items: normal;

                width: 100%;

                .titleContainer {
                    width: 70%;

                    display: flex;
                    align-items: center;
                    justify-content: center;

                    h3 {
                        font-family: "Roboto", sans-serif, arial, helvetica;
                        font-weight: 400;
                        font-size: $projectFontSize;
                        color: var(--pink-50);
                    }
                }

                .skillImageContainer {
                    width: calc(3 * $skillImageWidth); //calc($skillImageWidth + $skillImageWidth);
                    height: calc($skillImageWidth + 1rem);

                    display: flex;
                    // position: absolute;
                    // right: 0;
                    // bottom: 0;
                }
            }
        }
    }

    .void {
        width: calc(100% - $grid_width);
    }
}
